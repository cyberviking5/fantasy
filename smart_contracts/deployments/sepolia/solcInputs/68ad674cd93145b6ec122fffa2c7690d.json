{
  "language": "Solidity",
  "sources": {
    "contracts/Gamble.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Gamble {\r\n    address private immutable owner;\r\n    uint256 public immutable entryFee;\r\n    enum MatchStatus {\r\n        NotStarted,\r\n        Started,\r\n        Completed\r\n    }\r\n    MatchStatus private matchStatus;\r\n\r\n    struct User {\r\n        bool hasEntered;\r\n        uint256 result; // 0 = Loss, 1 = Win, 2 = Live\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => uint256) public gamblersToAmountBet;\r\n    address[] public gamblers;\r\n\r\n    event UserEntered(address user, uint256 amount);\r\n    event UserWon(address user, uint256 amount);\r\n    event UserLost(address user, uint256 amount);\r\n\r\n    constructor(uint256 _entryFee) {\r\n        owner = msg.sender;\r\n        entryFee = _entryFee;\r\n        matchStatus = MatchStatus.NotStarted;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setMatchStatus(address _user) private {\r\n        if (users[_user].result == 1 || users[_user].result == 2) {\r\n            matchStatus = MatchStatus.Completed;\r\n        } else {\r\n            matchStatus = MatchStatus.Started;\r\n        }\r\n    }\r\n\r\n    function setResultStatusWon(address user ) public{\r\n            users[user].result=1;\r\n    }\r\n\r\n    function setResultStatusLost(address user ) public{\r\n            users[user].result=0;\r\n    }\r\n    function setResultStatusLive(address user ) public{\r\n            users[user].result=2;\r\n    }\r\n\r\n    function enter() public payable {\r\n        require(msg.value >= entryFee/10**18, \"Insufficient entry fee\");\r\n        require(matchStatus == MatchStatus.NotStarted , \"Match already started\");\r\n        require(!users[msg.sender].hasEntered, \"You have already entered\");\r\n\r\n        gamblersToAmountBet[msg.sender] = msg.value;\r\n        gamblers.push(msg.sender);\r\n        users[msg.sender].hasEntered = true;\r\n        emit UserEntered(msg.sender, msg.value);\r\n    }\r\n\r\n    function setMatchStatusNotStarted() public  {\r\n        matchStatus = MatchStatus.NotStarted;\r\n    }\r\n\r\n    function setMatchStatusStarted() public  {\r\n        matchStatus = MatchStatus.Started;\r\n    }\r\n\r\n    function setMatchStatusCompleted() public  {\r\n        matchStatus = MatchStatus.Completed;\r\n    }\r\n\r\n    function settleTeamResult(address user) public {\r\n        require(users[user].hasEntered, \"User has not entered\");\r\n        require(matchStatus == MatchStatus.Completed, \"Match not completed\");\r\n\r\n        if (users[user].result == 1) {\r\n            uint256 winnings = entryFee +\r\n                (gamblersToAmountBet[user] / gamblers.length);\r\n            payable(user).transfer(winnings);\r\n            emit UserWon(user, winnings);\r\n        } else if (users[user].result == 0) {\r\n            uint256 lossAmount = entryFee;\r\n            emit UserLost(user, lossAmount);\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(\r\n            matchStatus == MatchStatus.Completed,\r\n            \"Wait for match completion\"\r\n        );\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getEntryFee() public view returns (uint256) {\r\n        return entryFee;\r\n    }\r\n\r\n    function getMatchStatus() public view returns (MatchStatus) {\r\n        return matchStatus;\r\n    }\r\n\r\n    function getUserEntryStatus(address user) public view returns (bool) {\r\n        return users[user].hasEntered;\r\n    }\r\n\r\n    function getUserResult(address user) public view returns (uint256) {\r\n        return users[user].result;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}