{
  "language": "Solidity",
  "sources": {
    "contracts/Gamble.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Gamble {\n    address private immutable owner;\n    uint256 public immutable entryFee;\n    enum MatchStatus {\n        NotStarted,\n        Started,\n        Completed\n    }\n    MatchStatus private matchStatus;\n\n    struct User {\n        bool hasEntered;\n        uint256 result; // 0 = Loss, 1 = Win, 2 = Live\n    }\n\n    mapping(address => User) public users;\n    mapping(address => uint256) public gamblersToAmountBet;\n    address[] public gamblers;\n\n    event UserEntered(address user, uint256 amount);\n    event UserWon(address user, uint256 amount);\n    event UserLost(address user, uint256 amount);\n\n    constructor(uint256 _entryFee) {\n        owner = msg.sender;\n        entryFee = _entryFee;\n        matchStatus = MatchStatus.NotStarted;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function\");\n        _;\n    }\n\n    function setMatchStatus(address _user) private {\n        if (users[_user].result == 1 || users[_user].result == 2) {\n            matchStatus = MatchStatus.Completed;\n        } else {\n            matchStatus = MatchStatus.Started;\n        }\n    }\n\n    function setResultStatusWon(address user ) public{\n            users[user].result=1;\n    }\n\n    function setResultStatusLost(address user ) public{\n            users[user].result=0;\n    }\n    function setResultStatusLive(address user ) public{\n            users[user].result=2;\n    }\n\n    function enter() public payable {\n        require(msg.value >= entryFee/10**18, \"Insufficient entry fee\");\n        require(matchStatus == MatchStatus.NotStarted , \"Match already started\");\n        require(!users[msg.sender].hasEntered, \"You have already entered\");\n\n        gamblersToAmountBet[msg.sender] = msg.value;\n        gamblers.push(msg.sender);\n        users[msg.sender].hasEntered = true;\n        emit UserEntered(msg.sender, msg.value);\n    }\n\n    function setMatchStatusNotStarted() public  {\n        matchStatus = MatchStatus.NotStarted;\n    }\n\n    function setMatchStatusStarted() public  {\n        matchStatus = MatchStatus.Started;\n    }\n\n    function setMatchStatusCompleted() public  {\n        matchStatus = MatchStatus.Completed;\n    }\n\n    function settleTeamResult(address user) public {\n        require(users[user].hasEntered, \"User has not entered\");\n        require(matchStatus == MatchStatus.Completed, \"Match not completed\");\n\n        if (users[user].result == 1) {\n            uint256 winnings = entryFee +\n                (gamblersToAmountBet[user] / gamblers.length);\n            payable(user).transfer(winnings);\n            emit UserWon(user, winnings);\n        } else if (users[user].result == 0) {\n            uint256 lossAmount = entryFee;\n            emit UserLost(user, lossAmount);\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        require(\n            matchStatus == MatchStatus.Completed,\n            \"Wait for match completion\"\n        );\n        payable(owner).transfer(address(this).balance);\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    function getEntryFee() public view returns (uint256) {\n        return entryFee;\n    }\n\n    function getMatchStatus() public view returns (MatchStatus) {\n        return matchStatus;\n    }\n\n    function getUserEntryStatus(address user) public view returns (bool) {\n        return users[user].hasEntered;\n    }\n\n    function getUserResult(address user) public view returns (uint256) {\n        return users[user].result;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}